#!/bin/bash

parseArgs(){
  # sets 4 variables:
  numArgs=1              # the total number of arguments
  arg[0]='Arguments'     # an array of arguments with index matching value[]
  value[0]='Values'      # an array of values with index matching arg[]
  errCount=0             # count of errors detected
  errMsgs=""             # \n seperated list of errors

  # uses
  allowedArgs=(a b c help debug version x h e l p)      # Array of allowed arguments
  allowAllArgs=1                        # Allow all arguments and ignore $allowedArgs
                                        # doesn't sound a good idea, but there you go
                                        # export ARGS2ARR_ALL=1 to set on a user basis
  if [ "$ARGS2ARR_ALL" == "1" ]; then allowAllArgs=1; fi


  while [ "$1" != "" ]; do
    currentArg=$1
    nextArg=$2
    split=0
    if [ "${currentArg:0:1}" == "-" ] && [ "${currentArg:0:3}" != "---" ]; then
      pos="${currentArg%%=*}"
      [[ "$pos" = "$currentArg" ]] && eqpos=255 || eqpos="${#pos}"
      if [ $eqpos -ne 255 ]; then
        if [ "${currentArg:0:2}" != "--" ]; then
          split=1
          unaltered=$currentArg
          nextArg=${unaltered:$(( eqpos + 1 ))}
          trim=${#nextArg}
          currentArg=${currentArg/=/ }
          currentArg=${currentArg:0:-$(( trim + 1 ))}
          currentArg=${currentArg/ /}
        elif [ "${currentArg:0:2}" == "--" ]; then
          split=1
          unaltered=$currentArg
          nextArg=${unaltered:$(( eqpos + 1 ))}
          trim=${#nextArg}
          currentArg=${currentArg/=/ }
          currentArg=${currentArg:0:-$(( trim + 1 ))}
          currentArg=${currentArg/ /}
          nextArg=${unaltered:$(( $eqpos + 1 ))}
        fi
      fi
      if [ ${currentArg:0:2} != "--" ]; then
        grouplen=$(( ${#currentArg} -1 ))
        for i in $(seq 1 $grouplen);
        do
          arg[$numArgs]=${currentArg:$i:1}
          numArgs=$(( $numArgs + 1 ))
        done
        numArgs=$(( $numArgs - 1 ))
        if [ "${nextArg:0:1}" != "-" ]  && [ "$nextArg" != "" ] || [ $split -eq 1 ]; then
          value[$numArgs]=$nextArg
          if [ $eqpos -eq 255 ]; then shift 1; fi
        fi
        shift 1
      elif [ "${currentArg:0:2}" == "--" ] && [ "$nextArg" != "" ]; then
        arg[$numArgs]=${currentArg:2}
        if [[ "${nextArg:0:1}" != "-" || $split -eq 1 ]]; then
          value[$numArgs]=$nextArg
          shift 1
        fi
        if [ $eqpos -eq 255 ]; then shift 1; fi
      else
        arg[$numArgs]=${currentArg:2}
        shift 1
      fi
    else
      errMsgs=$errMsgs"Unrecognised parameter $currentArg\n"
      numArgs=$(( $numArgs - 1 ))
      errCount=$(( $errCount + 1 ))
      shift 1
    fi
    numArgs=$(( $numArgs + 1 ))
  done
  numArgs=$(( $numArgs - 1 ))

  # Check whether the provided arguments are in $allowedArgs
  if [ $allowAllArgs -ne 1 ]; then
    for i in $(echo ${arg[@]})
    do
      allowed=0
      if [ "$i" == "Arguments" ]; then allowed=1; fi
      for j in $(seq 0 ${#allowedArgs[@]})
      do
        if [ "$i" == "${allowedArgs[$j]}" ]; then
          allowed=1
        fi
      done
      if [ $allowed -eq 0 ]; then
        if [ ${#i} -lt 2 ]; then
          errMsgs=$errMsgs"Invalid parameter '-$i'\n"
        else
          errMsgs=$errMsgs"Invalid parameter '--$i'\n"
        fi
        errCount=$(( $errCount + 1 ))
      fi
    done
  fi

  if [ $errCount -gt 0 ]; then
    errMsgs=${errMsgs::-2}
  fi
}

help(){
cat << EOF

args2arr example
----------------

Converts command line options to 2 'linked' arrays of parameter name
and the value (if any) specified.  Errors are stored as a count and
and as messages; deal with them as you will.

This example shows how to 
 * simply deal with errors
 * create an associative array
 * list  'allowed parameters' found using the associative array
 * check for a single and only parameter


Use
---

Specify an argument (no value):
  -p
  --parameter

Specify a parameter value:
  -p 3
  -p=3
  -p "Long string"
  -p="Long string"
  --parameter 3
  --parameter=3
  -parameter=3
  --parameter "Long string"
  --parameter="Long string"
  -parameter="Long string"

Specify multiple arguments:
  -abc
    is the same as -a -b -c
  -abc 5
    is the same as -a -b -c 5
    or -a -b -c=5
  Note:
  -abc=5
    is not the same and is interpreted as " parameter 'abc' has vale '5' "

Note:
  A parameter *value* starting with "-" must use the '-p=value' format,
  quoted as needed. E.g.  -d=-4 not -d -4

EOF
}

# Call the main function to parse all command line arguments
parseArgs "$@"

# Check if any errors were found
# the function itself won't output anything or exit
if [ $errCount -gt 0 ]; then
  echo $errCount errors found
  echo -e $errMsgs
  exit $errCount
fi

# Simple replacement for 'seq' to save forking a new shell
# (better version in the same repo)
seqq(){
  if [ "$1" -a "$2" ]; then
    if [[ $1 =~ ^[0-9]+$ ]]; then
      seqStart=$1
    else
      return 255
    fi
    if [[ $2 =~ ^[0-9]+$ ]]; then
      seqEnd=$2
    else
      return 255
    fi
    if [[ "$3" =~ ^[0-9]+$ ]]; then
      increment=$3
    else
      increment=1
    fi
    currentNum=$seqStart
    result=$currentNum
    while [ $currentNum -lt $seqEnd ]; do
      currentNum=$(( currentNum + increment ))
      if [ $currentNum -lt $seqEnd ]; then
        result="$result $currentNum"
      fi
    done
    echo $result
    return 0
  else
    return 255
  fi
}

# Combine the 2 arrays into an associative array
# Note: can't be done in the function as 'declare' is needed
# and makes the array local to the function
#
# *** IMPORTANT ***
#
# This does NOT cater for duplicate parameters:
#   -a=first -a=second
# will result in a=second
#
# see https://github.com/davejbarnes/random/issues/7
# for details of how to handle duplicates 
#
declare -A argArr
for i in $(seqq 1 $numArgs); do
  argArr[${arg[$i]}]=${value[$i]}
done

##########################
# And you're good to go! #
##########################


###########
# Examples

# Report what parameters and values where found
echo -e '--------------------------------------------------------'
for p in ${!argArr[@]}; do
  if [ ${#p} -gt 1 ]; then dash='--'; else dash='-';fi
  if [ ${argArr[$p]+_} ];then
    if [ "${argArr[$p]}" != "" ]; then
      echo "parameter $dash$p was found with value ${argArr[$p]}"
    else
      echo "parameter $dash$p was found";
    fi
  fi
done
echo -e '--------------------------------------------------------'

#Display help if --help was provided as first and only parameter
if [ ${argArr[help]+_} ]; then
  if [ "${arg[1]}" == "help" ] && [ ${#@} -eq 1 ]; then
    help
    exit 0
  else
    echo "--help must be first and only parameter"
    exit 1
  fi
fi
